import json
import paho.mqtt.client as mqtt
from influxdb import InfluxDBClient

# 1Ô∏è‚É£ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ MQTT Broker ‡πÅ‡∏•‡∏∞ Topic
MQTT_BROKER = "localhost"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô MQTT Broker ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
MQTT_PORT = 1883
MQTT_TOPIC = "sensor/data"

# 2Ô∏è‚É£ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ InfluxDB
INFLUXDB_HOST = "localhost"  # ‡∏´‡∏£‡∏∑‡∏≠ IP ‡∏Ç‡∏≠‡∏á InfluxDB
INFLUXDB_PORT = 8086
INFLUXDB_DBNAME = "sensor_db"
INFLUXDB_USER = "admin"  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Authentication
INFLUXDB_PASSWORD = "adminpassword"

# 3Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö InfluxDB
def connect_influxdb():
    client = InfluxDBClient(INFLUXDB_HOST, INFLUXDB_PORT, INFLUXDB_USER, INFLUXDB_PASSWORD, INFLUXDB_DBNAME)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Database ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
    databases = client.get_list_database()
    if INFLUXDB_DBNAME not in [db['name'] for db in databases]:
        client.create_database(INFLUXDB_DBNAME)
        print(f"‚úÖ Created database: {INFLUXDB_DBNAME}")

    return client

# 4Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å MQTT
def on_message(client, userdata, msg):
    try:
        payload = json.loads(msg.payload.decode("utf-8"))
        print(f"üì© Received data: {payload}")

        json_body = [
            {
                "measurement": "sensor_data",
                "tags": {
                    "sensor_id": payload.get("sensor_id", "unknown"),
                    "location": payload.get("location", "unknown"),
                },
                "fields": {
                    "temperature": float(payload["temperature"]),
                    "humidity": float(payload["humidity"]),
                    "pressure": float(payload["pressure"]),
                }
            }
        ]

        client_influx.write_points(json_body)
        print("‚úÖ Data written to InfluxDB")

    except Exception as e:
        print(f"‚ùå Error: {e}")

# 5Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MQTT Client
def start_mqtt():
    client = mqtt.Client()
    client.on_message = on_message
    client.connect(MQTT_BROKER, MQTT_PORT)
    client.subscribe(MQTT_TOPIC)
    print(f"üì° Listening for messages on topic: {MQTT_TOPIC}")
    client.loop_forever()

# 6Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if __name__ == "__main__":
    client_influx = connect_influxdb()  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö InfluxDB
    start_mqtt()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MQTT
