import time
import pandas as pd
from datetime import datetime, timedelta
import pytz
from influxdb import InfluxDBClient
import pymssql

# üü¢ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ InfluxDB
INFLUXDB_HOST = "localhost"
INFLUXDB_PORT = 8086
INFLUXDB_DBNAME = "sensor_db"
INFLUXDB_USER = "admin"
INFLUXDB_PASSWORD = "adminpassword"

# üü¢ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MSSQL
MSSQL_HOST = "localhost"
MSSQL_USER = "sa"
MSSQL_PASSWORD = "NewStrong!Passw0rd"
MSSQL_DBNAME = "sensor_db"

# üü¢ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ INTERVAL_TIME (1 ‡∏ô‡∏≤‡∏ó‡∏µ - 1 ‡∏ß‡∏±‡∏ô)
INTERVAL_TIME = 1  # ‡∏ô‡∏≤‡∏ó‡∏µ

# üü¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (UTC+7)
BANGKOK_TZ = pytz.timezone("Asia/Bangkok")

# üü¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á MSSQL ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
def create_table():
    conn = pymssql.connect(MSSQL_HOST, MSSQL_USER, MSSQL_PASSWORD, MSSQL_DBNAME)
    cursor = conn.cursor()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    cursor.execute("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'sensor_data'")
    if cursor.fetchone()[0] == 0:
        query = """
        CREATE TABLE sensor_data (
            id INT IDENTITY(1,1) PRIMARY KEY,
            sensor_id VARCHAR(50),
            location VARCHAR(100),
            temperature FLOAT,
            humidity FLOAT,
            pressure FLOAT,
            timestamp DATETIME
        )
        """
        cursor.execute(query)
        conn.commit()
        print("‚úÖ Created table: sensor_data")
    else:
        print("‚úÖ Table sensor_data already exists, skipping creation.")

    conn.close()

# üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å MSSQL
def get_last_timestamp():
    conn = pymssql.connect(MSSQL_HOST, MSSQL_USER, MSSQL_PASSWORD, MSSQL_DBNAME)
    cursor = conn.cursor()

    query = "SELECT MAX(timestamp) FROM sensor_data"
    cursor.execute(query)
    last_timestamp = cursor.fetchone()[0]

    conn.close()
    return last_timestamp

# üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å InfluxDB ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
def fetch_influxdb(start_time, end_time):
    client = InfluxDBClient(INFLUXDB_HOST, INFLUXDB_PORT, INFLUXDB_USER, INFLUXDB_PASSWORD, INFLUXDB_DBNAME)

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô UTC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö InfluxDB
    start_utc = start_time.astimezone(pytz.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    end_utc = end_time.astimezone(pytz.utc).strftime("%Y-%m-%dT%H:%M:%SZ")

    print(f"üì° Fetching data from {start_utc} to {end_utc} (UTC)")

    query = f"SELECT * FROM sensor_data WHERE time >= '{start_utc}' AND time < '{end_utc}'"
    result = client.query(query)

    points = list(result.get_points())
    df = pd.DataFrame(points)

    if "time" in df.columns:
        df["time"] = pd.to_datetime(df["time"], errors="coerce")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ timezone ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if df["time"].dt.tz is None:
            df["time"] = df["time"].dt.tz_localize("UTC").dt.tz_convert(BANGKOK_TZ)
        else:
            df["time"] = df["time"].dt.tz_convert(BANGKOK_TZ)

        df.rename(columns={"time": "timestamp"}, inplace=True)
    else:
        print("‚ö†Ô∏è Warning: 'time' column not found, skipping time conversion")

    return df


# üü¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MSSQL
def insert_to_mssql(df):
    if df.empty:
        print("‚ö†Ô∏è No new data to insert")
        return
    
    conn = pymssql.connect(MSSQL_HOST, MSSQL_USER, MSSQL_PASSWORD, MSSQL_DBNAME)
    cursor = conn.cursor()

    for _, row in df.iterrows():
        query = """
        INSERT INTO sensor_data (sensor_id, location, temperature, humidity, pressure, timestamp)
        VALUES (%s, %s, %s, %s, %s, %s);
        """
        cursor.execute(query, (row["sensor_id"], row["location"], row["temperature"], row["humidity"], row["pressure"], row["timestamp"]))

    conn.commit()
    conn.close()
    print(f"‚úÖ Inserted {len(df)} records into MSSQL")

# üü¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å InfluxDB ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MSSQL ‡∏ó‡∏∏‡∏Å INTERVAL_TIME ‡∏ô‡∏≤‡∏ó‡∏µ
def run_sync():
    create_table()  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    last_executed = None  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    while True:
        now = datetime.now(BANGKOK_TZ)
        current_minute = now.minute
        current_second = now.second

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö INTERVAL_TIME)
        if current_minute % INTERVAL_TIME == 0 and current_second >= 5:
            if last_executed != now.replace(second=0, microsecond=0):
                start_time = now - timedelta(minutes=INTERVAL_TIME)
                end_time = now
                df = fetch_influxdb(start_time, end_time)  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å InfluxDB
                insert_to_mssql(df)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MSSQL
                last_executed = now.replace(second=0, microsecond=0)

        time.sleep(1)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
if __name__ == "__main__":
    run_sync()
